@property --animate-tunnelball-angle {
  syntax: "<angle>";
  inherits: true;
  initial-value: 0deg;
}

@property --animate-tunnelball-circle-diameter {
  syntax: "<length>";
  inherits: true;
  initial-value: 0;
}

$walls: 6;
$half: $walls / 2;
$surfaces: $walls * 2;

:root {
  --animate-tunnelball-c1: #6eccee;
  --animate-tunnelball-c2: #ffdc99;
  --animate-tunnelball-c3: #e3a4d0;
  --animate-tunnelball-c4: #d455ff;
  --animate-tunnelball-duration: 2.8s;
  --animate-tunnelball-border: 0.3vmin;
  --animate-tunnelball-glow: drop-shadow(0 0 3vmin rgba(255, 255, 255, 0.19));
  --animate-tunnelball-hole-y: 20%;
  --animate-tunnelball-hole-radius: 11vmin;
  --animate-tunnelball-surface-offset: calc(360deg / 24);
}

.animate-tunnelball-container {
  position: relative;
  width: 25vmin;
  aspect-ratio: 1/1.2;
  --animate-tunnelball-angle: 30deg;
  animation: animate-tunnelball-rotate var(--animate-tunnelball-duration) linear infinite;
  transform-style: preserve-3d;
  transform: rotateX(-45deg) rotateY(45deg);
}

.animate-tunnelball-wall {
  position: absolute;
  inset: 0;
  --wall-gap: 5vmin;
  filter: var(--animate-tunnelball-glow);

  @for $i from 1 through $walls {
    $index: $i - 3;
    $surfaceIndex: ($i - 1) * 2 + 1;

    &:nth-of-type(#{$i}) {
      transform: translateZ(calc(var(--wall-gap) * #{$index - 1}));
      --index: #{$i};

      .animate-tunnelball-surface {
        --index: #{$surfaceIndex};

        &:nth-child(2) {
          --index: #{$surfaceIndex + 1};
        }
      }
    }
  }
}

.animate-tunnelball-surface {
  position: absolute;
  inset: 0;
  --angle-offset: calc(var(--index) * var(--animate-tunnelball-surface-offset));
  --circle-diameter: calc(
    var(--animate-tunnelball-hole-radius) * cos(calc(var(--animate-tunnelball-angle) + var(--angle-offset)))
  );
  -webkit-mask: radial-gradient(
    circle at 50% var(--animate-tunnelball-hole-y),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  mask: radial-gradient(
    circle at 50% var(--animate-tunnelball-hole-y),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  background: radial-gradient(
      circle at 50% var(--animate-tunnelball-hole-y),
      var(--animate-tunnelball-c4) calc(var(--circle-diameter) + var(--animate-tunnelball-border)),
      transparent var(--circle-diameter)
    ),
    linear-gradient(
      45deg,
      var(--animate-tunnelball-c1),
      var(--animate-tunnelball-c3),
      var(--animate-tunnelball-c2),
      var(--animate-tunnelball-c1),
      var(--animate-tunnelball-c4),
      var(--animate-tunnelball-c3),
      var(--animate-tunnelball-c2)
    );

  &:nth-child(2) {
    transform: translate(2vmin, 2.85vmin);
  }
}

.animate-tunnelball-left {
  position: absolute;
  transform: skewY(55deg) translateY(1.45vmin);
  inset: 0;
  width: 2.25vmin;
  background: linear-gradient(
    to top,
    var(--animate-tunnelball-c1),
    var(--animate-tunnelball-c3),
    var(--animate-tunnelball-c2),
    var(--animate-tunnelball-c1)
  );
}

.animate-tunnelball-top {
  position: absolute;
  transform: skewX(36deg) translateX(1vmin);
  inset: 0;
  height: 3vmin;
  background: linear-gradient(
    to right,
    var(--animate-tunnelball-c1),
    var(--animate-tunnelball-c3),
    var(--animate-tunnelball-c2),
    var(--animate-tunnelball-c1)
  );
  --angle-offset: calc(var(--index) * var(--animate-tunnelball-surface-offset));
  --circle-diameter: calc(
    var(--animate-tunnelball-hole-radius) * cos(calc(var(--animate-tunnelball-angle) + var(--angle-offset)))
  );
  -webkit-mask: radial-gradient(
    calc(var(--circle-diameter) * 0.86) at 50%
      calc(60% / cos(calc(var(--animate-tunnelball-angle) + var(--angle-offset)))),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  mask: radial-gradient(
    calc(var(--circle-diameter) * 0.86) at 50%
      calc(60% / cos(calc(var(--animate-tunnelball-angle) + var(--angle-offset)))),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-size: 100% 100%;
  mask-size: 100% 100%;
  -webkit-mask-position: 0 0;
  mask-position: 0 0;
  z-index: 1;

  .animate-tunnelball-wall:nth-last-child(-n+2) & {
    --circle-diameter: calc(
      var(--animate-tunnelball-hole-radius) * 1.15 * cos(calc(var(--animate-tunnelball-angle) + var(--angle-offset) - 15deg))
    );
  }
}

.animate-tunnelball-ball-container {
  z-index: 0;
  display: grid;
  place-items: center;
  position: absolute;
  inset: 0;
  transform: translateZ(-35vmin);
  animation: animate-tunnelball-ball var(--animate-tunnelball-duration) linear infinite;
}

.animate-tunnelball-ball {
  width: 21vmin;
  aspect-ratio: 1;
  border-radius: 50%;
  filter: var(--animate-tunnelball-glow);
  background: radial-gradient(
      10.75vmin 10.75vmin at center,
      black 10vmin,
      transparent 10vmin
    ),
    conic-gradient(
      var(--animate-tunnelball-c1),
      var(--animate-tunnelball-c3),
      var(--animate-tunnelball-c2),
      var(--animate-tunnelball-c4),
      var(--animate-tunnelball-c3),
      var(--animate-tunnelball-c1),
      var(--animate-tunnelball-c2),
      var(--animate-tunnelball-c1)
    );
  box-shadow: 0 0 5vmin rgba(255, 255, 255, 0.08);
  transform: rotateX(45deg) rotateY(45deg) translateY(-10vmin);
}

@keyframes animate-tunnelball-rotate {
  from {
    --animate-tunnelball-angle: 360deg;
  }
  to {
    --animate-tunnelball-angle: 0deg;
  }
}

@keyframes animate-tunnelball-ball {
  from {
    transform: translateZ(-25vmin);
    opacity: 0;
  }
  10% {
    transform: translateZ(-15vmin);
    opacity: 1;
  }
  80% {
    opacity: 1;
    transform: translateZ(30vmin);
  }
  to {
    opacity: 0;
    transform: translateZ(40vmin);
  }
} 
